#summary Add Image Method

= Upload Image =

|| *URI* || `https://api.passkit.com/v1/image/add/`<font color="blue">{imageType}</font> <font color="grey">_/url={url} (optional)_</font><font color="grey"> _/?format=xml (optional)_</font> ||
|| *Verb* || POST ||
|| *Auth* || Yes ||

This method allows you to upload images for use with other methods such as template methods and pass methods.  Each image that is uploaded is assigned a unique ID, and is processed for use with Passbook, according to the <font color="blue">imageType</font> selected.

Images of type `image/jpeg, image/png` and `image/gif` can be uploaded and an imageID is returned.

A single image can be used for multiple purposes _(E.g. as a thumbnail and as an icon)_ but to do so, it must be uploaded twice.  Under these cases, a single imageID will be approved for use with multiple types.

To see all the permitted usage types for a particular imageID, see the Get Image Details call.

The same image can 

== URL Parameters ==

* <font color="blue">imageType</font> *<font color="green"> _(string)_</font> can be any one of the following:
  * _background
  * footer
  * logo
  * icon
  * strip
  * thumbnail_

_*Note:* Image types, sizes and their role in each pass type is explained in more detail [PassImages here]_ 

* <font color="blue">url</font> *<font color="green"> _(string)_</font> <font color="grey"> _optional_</font> The url for an image already hosted online (instead of uploading one).

== Request Contents ==

The request type must be `Content-Type multipart/form-data`, and the request must contain a field titled <font color="green">_*image*_</font> containing  a file of type `image/jpeg, image/png` or `image/gif` image. 

==== cURL Syntax ====
<code>
curl --digest -u ff0b04afe47feacd09a850d9a1dd91d0:kFTlvlfrjU/djar.V3tO0uyvoF0svLGVhM7ccGN.ek80GdqcJNcju 
     -F "image=@{filename};type={MIME type}" -X POST "https://api.passkit.com/v1/image/add/{imageType}"</code>
----
== Responses ==

A successful upload should receive the following response:

==== JSON Format ====

<code language="javascript">
{
    "success": true,
    "imageID": "UPQCQqyzzLaJEvfq9X0pM",
    "usage": "Thumbnail Image"
}
</code>

==== XML Format ====

{{{
<?xml version="1.0"?>
<PassKit_API_Response>
    <success>1</success>
    <imageID>UPQCQqyzzLaJEvfq9X0pM</imageID>
    <usage>UPQCQqyzzLaJEvfq9X0pM</usage>
</PassKit_API_Response>
}}}

=== Response Parameters ===
  * *<font color="blue">success</font>* <font color="green">_(boolean)_</font>
    *_ Will return true for a successful upload, or will not be present in the case of an error
  * *<font color="blue">imageID</font>* <font color="green">_(string)_</font>
    *_ imageID for use in other methods
  * *<font color="blue">usage</font>* <font color="green">_(string)_</font>
    *_ The usage type that image has been processed for
----

== Implementation examples ==

Download latest PassKit PHP -and/or C# SDK: https://code.google.com/p/passkit/downloads/list

==== PHP Implementation =====

{{{
<?php
/**
* Example: Upload image
* URI: https://api.passkit.com/v1/image/add/{imageType}
*/

// Include passkit api file
require_once ('class-PassKit.php');

// Set variables
$api_key = "apiKey"; // Add your PassKit API Key
$api_secret = "apiSecret"; // Add your PassKit API Secret
$template_name = "My template"; // Add your template name here
$path_to_image_file = "home/my_image.jpg"; // Set this to your image path. 

// Create new PassKit instance
$pk = new PassKit($apiKey, $apiSecret);

// Upload the image. Image-type has to be has to be: thumbnail, strip, logo, footer, background or icon
$pk_image_id = $pk->pk_image_upload("strip", $path_to_image_file);

// After upload, $pk_image_id contains the image id for the image. We use this data id in the data array (when issuing or updating a pass).
// The data array can be: thumbnailImage, stripImage, logoImage, footerImage, backgroundImage or iconImage (depending on the purpose
// that you want to use the image for.
$data["stripImage"] = $pk_image_id;
// Set other data parameters
$data["field1"] = "field 1 data";
$data["field2"] = "field 2 data";

// Now issue or update the pass with this data, and the image will be set
$pk->pk_issue_pass($template_name, $data);
?>
}}}

==== C# Implementation ====
{{{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.ComponentModel;
using System.Text;
using System.Reflection;
// Make sure to include PassKitAPIWrapper class (takes care of all communication with the API)
using PassKitAPIWrapper;

namespace PassKitWebDemo
{
    public partial class Default : System.Web.UI.Page
    {
        // Set API Account (set with your API account)
        private string apiAccount = "apiAccount";
        // Set API secret (set with your API secret)
        private string apiSecret = "apiSecret";

        protected void Page_Load(object sender, EventArgs e)
        {
            // Set template name
            string template_name = "My template name";

            // Initialize new instance of PassKit API wrapper
            PassKit pk = new PassKit(apiAccount, apiSecret);
            // GetTemplateFieldNames will get the template details for template_name
            PassKitResponse result = pk.GetTemplateFieldNames(template_name);
    
            // Do something with result
        }
    }
}
}}}

<table border="0">
  <tr>
    <td width="361"><g:plusone size="medium"></g:plusone></td>
    <td width="353">[http://PassKit.com/ PassKit Home Page]</td>
    <td width="128">[https://create.passkit.com Register with PassKit]</td>
  </tr>
</table>